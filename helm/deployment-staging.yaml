affinity: {}
applicationProdProperties:
  configmap:
    application-prod.properties: >


      server.port=1201

      server.servlet.context-path=/user-service/v1


      logging.config=logback.xml


      conversation.expiry=180


      spring.jpa.hibernate.ddl-auto=none

      spring.datasource.url=jdbc:mysql://my-release-mysql-primary.default.svc.cluster.local:3306/symplified

      spring.datasource.username=root

      spring.datasource.password=kalsym@123

      spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl


      spring.mail.host=smtpout.secureserver.net

      spring.mail.port=465

      spring.mail.username=no-reply@symplified.it

      spring.mail.password=SYMplified@1234

      spring.mail.properties.mail.smtp.auth=true

      spring.mail.properties.mail.smtp.socketFactory.port=465

      spring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory

      livechat.store.order.agent.group.invitation.url=https://api.symplified.it/product-service/v1/stores/<storeId>/livechat/order-csr/agentinvite

      livechat.store.complaint.agent.group.invitation.url=https://api.symplified.it/product-service/v1/stores/<storeId>/livechat/complaint-csr/agentinvite

      livechat.store.agent.creation.url=https://live.symplified.it/api/v1/users.create

      livechat.store.agent.deletion.url=https://live.symplified.it/api/v1/users.delete

      livechat.store.order.agent.group.invitation.url=https://api.symplified.it/product-service/v1/stores/<storeId>/livechat/order-csr/agentinvite

      livechat.store.complaint.agent.group.invitation.url:https://api.symplified.it/product-service/v1/stores/<storeId>/livechat/complaint-csr/agentinvite

      liveChat.login.url=https://live.symplified.it/api/v1/login

      symplified.merchant.reset.password.url=https://merchant.symplified.it/reset-password

      symplified.merchant.email.verification.url=https://merchant.symplified.it/email-verified

      symplified.email.service.url=https://api.symplified.it/email-service/v1

      email.verification.enabled=true

      symplified.google.clientid=934035766455-vv63m7qps417r5fdbvmqrp7g0i8nvc02.apps.googleusercontent.com

      fb.verify.appid=399115145224098

      fb.verify.appSecret=15a3b7a83bd746d16c03d512af670a1e

      session.key=secret

      session.expiry=14400

      orderService.claimnewuservoucher.URL=https://api.symplified.it/order-service/v1/voucher/claim/newuser/<customerId>
  volumeMount:
    - mountPath: /home/docker/Software/application-prod.properties
      name: user-service-approd-vol
      subPath: application-prod.properties
  volumes:
    - configMap:
        name: user-service-approd-cm
      name: user-service-approd-vol
applicationProperties:
  configmap:
    application.properties: >
      # Default config (refrain from editting this config, please add in
      application-prod.properties below)

      spring.profiles.active=prod

      proj.name=user-service

      build.version=@project.version@
  volumeMount:
    - mountPath: /home/docker/Software/application.properties
      name: user-service-ap-vol
      subPath: application.properties
  volumes:
    - configMap:
        name: user-service-ap-cm
      name: user-service-ap-vol
autoscaling:
  enabled: false
  maxReplicas: 100
  minReplicas: 1
  targetCPUUtilizationPercentage: 80
fullnameOverride: ''
image:
  pullPolicy: Always
  repository: kalsym/user-service
  tag: 3.4.0-SNAPSHOT
imagePullSecrets:
  - name: kalsym-docker-hub
ingress:
  className: ''
  enabled: true
  hosts:
    - host: api.symplified.it
      paths:
        - path: /user-service/v1
          pathType: ImplementationSpecific
    - host: api.dev-my.symplified.ai
      paths:
        - path: /user-service/v1
          pathType: ImplementationSpecific
    - host: api.dev-pk.symplified.ai
      paths:
        - path: /user-service/v1
          pathType: ImplementationSpecific
  tls:
    - hosts:
        - api.symplified.it
      secretName: secret-tls-it
    - hosts:
        - api.dev-my.symplified.ai
      secretName: secret-tls-ai
    - hosts:
        - api.dev-pk.symplified.ai
      secretName: secret-tls-ai
logback:
  configmap:
    logback.xml: |
      <?xml version="1.0" encoding="UTF-8"?>
      <configuration>

          <property name="LOGS" value="/home/docker/Software/logs/symplified" />
          <property name="CDRS" value="/home/docker/Software/logs" />

          <property resource="application.properties" />

          <appender name="Console" class="ch.qos.logback.core.ConsoleAppender">
              <layout class="ch.qos.logback.classic.PatternLayout">
                  <Pattern>
                      %black(%d{ISO8601}) %highlight(%-5level) %yellow(%C{1.}): %msg%n%throwable
                  </Pattern>
              </layout>
          </appender>

          <appender name="APPLICATION" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <file>${LOGS}/user-service/user-service.log</file>
              <append>true</append>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                  <!-- rollover daily and when the file reaches 10 MegaBytes -->
                  <fileNamePattern>${LOGS}/user-service/archived/user-service-%d{yyyy-MM-dd}.%i.log
                  </fileNamePattern>
                  <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                      <maxFileSize>10MB</maxFileSize>
                  </timeBasedFileNamingAndTriggeringPolicy>
              </rollingPolicy>
              <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
                  <charset>UTF-8</charset>
                  <layout class="ch.qos.logback.classic.PatternLayout">
                      <Pattern>%d %p %M %L [%t] - %m%n</Pattern>
                  </layout>
              </encoder>
          </appender>

          <appender name="CDR" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <file>${CDRS}/user-service-cdr.csv</file>
              <append>true</append>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                  <!-- rollover daily and when the file reaches 10 MegaBytes -->
                  <fileNamePattern>${CDRS}/user-service/cdrs/cdr-%d{yyyy-MM-dd}.%i.csv
                  </fileNamePattern>
                  <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                      <maxFileSize>10MB</maxFileSize>
                  </timeBasedFileNamingAndTriggeringPolicy>
              </rollingPolicy>
              <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
                  <charset>UTF-8</charset>
                  <layout class="ch.qos.logback.classic.PatternLayout">
                      <Pattern>%date{dd:MMM:yyyy;HH:mm:ss.SSS},%m%n</Pattern>
                  </layout>
              </encoder>
          </appender>

          <!-- LOG everything at INFO level -->
          <root level="INFO">
              <appender-ref ref="APPLICATION" />
          </root>

          <logger name="cdr" level="DEBUG" additivity="false">
              <appender-ref ref="CDR" />
          </logger>

          <!-- LOG "com.baeldung*" at TRACE level -->
          <!-- <logger name="application" level="DEBUG" additivity="true">
              <appender-ref ref="APPLICATION" />
          </logger> -->

      </configuration>
  volumeMount:
    - mountPath: /home/docker/Software/logback.xml
      name: user-service-lgb-vol
      subPath: logback.xml
  volumes:
    - configMap:
        name: user-service-lgb-cm
      name: user-service-lgb-vol
nameOverride: ''
nodeSelector: {}
podAnnotations: {}
podSecurityContext: {}
replicaCount: 1
resources: {}
securityContext: {}
service:
  port: 1201
  type: ClusterIP
serviceAccount:
  annotations: {}
  create: false
  name: ''
tolerations: []
